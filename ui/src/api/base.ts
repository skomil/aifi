/* tslint:disable */
/* eslint-disable */
/**
 * aifi - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about ```mermaid classDiagram class Component {     string id } class ComponentTemplate {     string id     string label } class Rack {     string id     %% the below property is an array with cardinality [0..*]     string hiddenComponents } class UiSetting {     string id     string label     boolean hidden     string dataType     string uiType     object defaultValue     object initialValue } class ComponentDefinition {     string id     string label     object apiConfiguration     string version }  class Asset {     string id     string type     string label     string description     string storageLocation     %% the below property is an array with cardinality [0..*]     string previewLocations }  class Rig {  } class Connection {     string id     string label     string description     string type     boolean required     boolean allowMultiple } class KeyValue {     string key     string value } class Error {     string message     integer code }  Rack \"1\" --> \"0..*\" Component : components Rig \"1\" --> \"0..*\" ComponentDefinition : componentDefinitions Rig  \"1\" --> \"0..*\" KeyValue : config Rig  \"1\" --> \"0..*\" KeyValue : secrets Rack \"1\" --> \"0..1\"  Component: rackAsComponent Rack \"1\" --> \"0..*\"  Connection: output Rig \"1\" --> \"0..*\" Rack : racks ComponentDefinition \"1\" --> \"1..*\" ComponentTemplate : componentTemplates ComponentDefinition \"1\" --> \"0..*\" Asset : assets ComponentTemplate \"1\" --> \"1\" Component: component Component \"1\" --> \"0..1\"  ComponentDefinition: componentDefinition Component \"1\" --> \"0..*\"  UiSetting: uiSettings Component \"1\" --> \"0..*\"  Connection: input Component \"1\" --> \"0..*\"  Connection: output ```
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "http://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: AxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}
