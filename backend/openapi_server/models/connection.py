# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Connection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, label=None, description=None, type=None, required=None, allow_multiple=None):  # noqa: E501
        """Connection - a model defined in OpenAPI

        :param id: The id of this Connection.  # noqa: E501
        :type id: str
        :param label: The label of this Connection.  # noqa: E501
        :type label: str
        :param description: The description of this Connection.  # noqa: E501
        :type description: str
        :param type: The type of this Connection.  # noqa: E501
        :type type: str
        :param required: The required of this Connection.  # noqa: E501
        :type required: bool
        :param allow_multiple: The allow_multiple of this Connection.  # noqa: E501
        :type allow_multiple: bool
        """
        self.openapi_types = {
            'id': str,
            'label': str,
            'description': str,
            'type': str,
            'required': bool,
            'allow_multiple': bool
        }

        self.attribute_map = {
            'id': 'id',
            'label': 'label',
            'description': 'description',
            'type': 'type',
            'required': 'required',
            'allow_multiple': 'allowMultiple'
        }

        self._id = id
        self._label = label
        self._description = description
        self._type = type
        self._required = required
        self._allow_multiple = allow_multiple

    @classmethod
    def from_dict(cls, dikt) -> 'Connection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Connection of this Connection.  # noqa: E501
        :rtype: Connection
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Connection.


        :return: The id of this Connection.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Connection.


        :param id: The id of this Connection.
        :type id: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this Connection.


        :return: The label of this Connection.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Connection.


        :param label: The label of this Connection.
        :type label: str
        """

        self._label = label

    @property
    def description(self):
        """Gets the description of this Connection.


        :return: The description of this Connection.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Connection.


        :param description: The description of this Connection.
        :type description: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this Connection.


        :return: The type of this Connection.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Connection.


        :param type: The type of this Connection.
        :type type: str
        """

        self._type = type

    @property
    def required(self):
        """Gets the required of this Connection.


        :return: The required of this Connection.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this Connection.


        :param required: The required of this Connection.
        :type required: bool
        """

        self._required = required

    @property
    def allow_multiple(self):
        """Gets the allow_multiple of this Connection.


        :return: The allow_multiple of this Connection.
        :rtype: bool
        """
        return self._allow_multiple

    @allow_multiple.setter
    def allow_multiple(self, allow_multiple):
        """Sets the allow_multiple of this Connection.


        :param allow_multiple: The allow_multiple of this Connection.
        :type allow_multiple: bool
        """

        self._allow_multiple = allow_multiple
