# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.asset import Asset
from openapi_server.models.component_template import ComponentTemplate
from openapi_server import util

from openapi_server.models.asset import Asset  # noqa: E501
from openapi_server.models.component_template import ComponentTemplate  # noqa: E501

class ComponentDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, label=None, api_configuration=None, version=None, component_templates=None, assets=None):  # noqa: E501
        """ComponentDefinition - a model defined in OpenAPI

        :param id: The id of this ComponentDefinition.  # noqa: E501
        :type id: str
        :param label: The label of this ComponentDefinition.  # noqa: E501
        :type label: str
        :param api_configuration: The api_configuration of this ComponentDefinition.  # noqa: E501
        :type api_configuration: object
        :param version: The version of this ComponentDefinition.  # noqa: E501
        :type version: str
        :param component_templates: The component_templates of this ComponentDefinition.  # noqa: E501
        :type component_templates: List[ComponentTemplate]
        :param assets: The assets of this ComponentDefinition.  # noqa: E501
        :type assets: List[Asset]
        """
        self.openapi_types = {
            'id': str,
            'label': str,
            'api_configuration': object,
            'version': str,
            'component_templates': List[ComponentTemplate],
            'assets': List[Asset]
        }

        self.attribute_map = {
            'id': 'id',
            'label': 'label',
            'api_configuration': 'apiConfiguration',
            'version': 'version',
            'component_templates': 'componentTemplates',
            'assets': 'assets'
        }

        self._id = id
        self._label = label
        self._api_configuration = api_configuration
        self._version = version
        self._component_templates = component_templates
        self._assets = assets

    @classmethod
    def from_dict(cls, dikt) -> 'ComponentDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ComponentDefinition of this ComponentDefinition.  # noqa: E501
        :rtype: ComponentDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ComponentDefinition.


        :return: The id of this ComponentDefinition.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComponentDefinition.


        :param id: The id of this ComponentDefinition.
        :type id: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this ComponentDefinition.


        :return: The label of this ComponentDefinition.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ComponentDefinition.


        :param label: The label of this ComponentDefinition.
        :type label: str
        """

        self._label = label

    @property
    def api_configuration(self):
        """Gets the api_configuration of this ComponentDefinition.


        :return: The api_configuration of this ComponentDefinition.
        :rtype: object
        """
        return self._api_configuration

    @api_configuration.setter
    def api_configuration(self, api_configuration):
        """Sets the api_configuration of this ComponentDefinition.


        :param api_configuration: The api_configuration of this ComponentDefinition.
        :type api_configuration: object
        """

        self._api_configuration = api_configuration

    @property
    def version(self):
        """Gets the version of this ComponentDefinition.


        :return: The version of this ComponentDefinition.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ComponentDefinition.


        :param version: The version of this ComponentDefinition.
        :type version: str
        """

        self._version = version

    @property
    def component_templates(self):
        """Gets the component_templates of this ComponentDefinition.


        :return: The component_templates of this ComponentDefinition.
        :rtype: List[ComponentTemplate]
        """
        return self._component_templates

    @component_templates.setter
    def component_templates(self, component_templates):
        """Sets the component_templates of this ComponentDefinition.


        :param component_templates: The component_templates of this ComponentDefinition.
        :type component_templates: List[ComponentTemplate]
        """
        if component_templates is not None and len(component_templates) < 1:
            raise ValueError("Invalid value for `component_templates`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._component_templates = component_templates

    @property
    def assets(self):
        """Gets the assets of this ComponentDefinition.


        :return: The assets of this ComponentDefinition.
        :rtype: List[Asset]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this ComponentDefinition.


        :param assets: The assets of this ComponentDefinition.
        :type assets: List[Asset]
        """
        if assets is not None and len(assets) < 0:
            raise ValueError("Invalid value for `assets`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._assets = assets
