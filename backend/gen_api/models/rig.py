# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gen_api.models.base_model_ import Model
from gen_api.models.component_config import ComponentConfig
from gen_api.models.rack import Rack
from gen_api import util

from gen_api.models.component_config import ComponentConfig  # noqa: E501
from gen_api.models.rack import Rack  # noqa: E501

class Rig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, component_configs=None, racks=None):  # noqa: E501
        """Rig - a model defined in OpenAPI

        :param component_configs: The component_configs of this Rig.  # noqa: E501
        :type component_configs: List[ComponentConfig]
        :param racks: The racks of this Rig.  # noqa: E501
        :type racks: List[Rack]
        """
        self.openapi_types = {
            'component_configs': List[ComponentConfig],
            'racks': List[Rack]
        }

        self.attribute_map = {
            'component_configs': 'componentConfigs',
            'racks': 'racks'
        }

        self._component_configs = component_configs
        self._racks = racks

    @classmethod
    def from_dict(cls, dikt) -> 'Rig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Rig of this Rig.  # noqa: E501
        :rtype: Rig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def component_configs(self):
        """Gets the component_configs of this Rig.


        :return: The component_configs of this Rig.
        :rtype: List[ComponentConfig]
        """
        return self._component_configs

    @component_configs.setter
    def component_configs(self, component_configs):
        """Sets the component_configs of this Rig.


        :param component_configs: The component_configs of this Rig.
        :type component_configs: List[ComponentConfig]
        """

        self._component_configs = component_configs

    @property
    def racks(self):
        """Gets the racks of this Rig.


        :return: The racks of this Rig.
        :rtype: List[Rack]
        """
        return self._racks

    @racks.setter
    def racks(self, racks):
        """Sets the racks of this Rig.


        :param racks: The racks of this Rig.
        :type racks: List[Rack]
        """

        self._racks = racks
