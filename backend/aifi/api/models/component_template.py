# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from aifi.api.models.base_model_ import Model
from aifi.api.models.connection import Connection
from aifi.api.models.ui_setting import UiSetting
from aifi.api import util

from aifi.api.models.connection import Connection  # noqa: E501
from aifi.api.models.ui_setting import UiSetting  # noqa: E501

class ComponentTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, label=None, ui_settings=None, input=None, output=None):  # noqa: E501
        """ComponentTemplate - a model defined in OpenAPI

        :param id: The id of this ComponentTemplate.  # noqa: E501
        :type id: str
        :param label: The label of this ComponentTemplate.  # noqa: E501
        :type label: str
        :param ui_settings: The ui_settings of this ComponentTemplate.  # noqa: E501
        :type ui_settings: List[UiSetting]
        :param input: The input of this ComponentTemplate.  # noqa: E501
        :type input: List[Connection]
        :param output: The output of this ComponentTemplate.  # noqa: E501
        :type output: List[Connection]
        """
        self.openapi_types = {
            'id': str,
            'label': str,
            'ui_settings': List[UiSetting],
            'input': List[Connection],
            'output': List[Connection]
        }

        self.attribute_map = {
            'id': 'id',
            'label': 'label',
            'ui_settings': 'uiSettings',
            'input': 'input',
            'output': 'output'
        }

        self._id = id
        self._label = label
        self._ui_settings = ui_settings
        self._input = input
        self._output = output

    @classmethod
    def from_dict(cls, dikt) -> 'ComponentTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ComponentTemplate of this ComponentTemplate.  # noqa: E501
        :rtype: ComponentTemplate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ComponentTemplate.

        The unique identifier for the component template.  # noqa: E501

        :return: The id of this ComponentTemplate.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComponentTemplate.

        The unique identifier for the component template.  # noqa: E501

        :param id: The id of this ComponentTemplate.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def label(self):
        """Gets the label of this ComponentTemplate.

        The label for the component template.  # noqa: E501

        :return: The label of this ComponentTemplate.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ComponentTemplate.

        The label for the component template.  # noqa: E501

        :param label: The label of this ComponentTemplate.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def ui_settings(self):
        """Gets the ui_settings of this ComponentTemplate.

        The user interface settings for the component.  # noqa: E501

        :return: The ui_settings of this ComponentTemplate.
        :rtype: List[UiSetting]
        """
        return self._ui_settings

    @ui_settings.setter
    def ui_settings(self, ui_settings):
        """Sets the ui_settings of this ComponentTemplate.

        The user interface settings for the component.  # noqa: E501

        :param ui_settings: The ui_settings of this ComponentTemplate.
        :type ui_settings: List[UiSetting]
        """

        self._ui_settings = ui_settings

    @property
    def input(self):
        """Gets the input of this ComponentTemplate.

        The input connections for the component.  # noqa: E501

        :return: The input of this ComponentTemplate.
        :rtype: List[Connection]
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this ComponentTemplate.

        The input connections for the component.  # noqa: E501

        :param input: The input of this ComponentTemplate.
        :type input: List[Connection]
        """

        self._input = input

    @property
    def output(self):
        """Gets the output of this ComponentTemplate.

        The output connections for the component.  # noqa: E501

        :return: The output of this ComponentTemplate.
        :rtype: List[Connection]
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this ComponentTemplate.

        The output connections for the component.  # noqa: E501

        :param output: The output of this ComponentTemplate.
        :type output: List[Connection]
        """

        self._output = output
