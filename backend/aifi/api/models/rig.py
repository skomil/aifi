# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from aifi.api.models.base_model_ import Model
from aifi.api.models.device_factory import DeviceFactory
from aifi.api.models.key_value import KeyValue
from aifi.api.models.rack import Rack
from aifi.api import util

from aifi.api.models.device_factory import DeviceFactory  # noqa: E501
from aifi.api.models.key_value import KeyValue  # noqa: E501
from aifi.api.models.rack import Rack  # noqa: E501

class Rig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, factories=None, config=None, secrets=None, racks=None):  # noqa: E501
        """Rig - a model defined in OpenAPI

        :param factories: The factories of this Rig.  # noqa: E501
        :type factories: List[DeviceFactory]
        :param config: The config of this Rig.  # noqa: E501
        :type config: List[KeyValue]
        :param secrets: The secrets of this Rig.  # noqa: E501
        :type secrets: List[KeyValue]
        :param racks: The racks of this Rig.  # noqa: E501
        :type racks: List[Rack]
        """
        self.openapi_types = {
            'factories': List[DeviceFactory],
            'config': List[KeyValue],
            'secrets': List[KeyValue],
            'racks': List[Rack]
        }

        self.attribute_map = {
            'factories': 'factories',
            'config': 'config',
            'secrets': 'secrets',
            'racks': 'racks'
        }

        self._factories = factories
        self._config = config
        self._secrets = secrets
        self._racks = racks

    @classmethod
    def from_dict(cls, dikt) -> 'Rig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Rig of this Rig.  # noqa: E501
        :rtype: Rig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def factories(self):
        """Gets the factories of this Rig.


        :return: The factories of this Rig.
        :rtype: List[DeviceFactory]
        """
        return self._factories

    @factories.setter
    def factories(self, factories):
        """Sets the factories of this Rig.


        :param factories: The factories of this Rig.
        :type factories: List[DeviceFactory]
        """

        self._factories = factories

    @property
    def config(self):
        """Gets the config of this Rig.


        :return: The config of this Rig.
        :rtype: List[KeyValue]
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Rig.


        :param config: The config of this Rig.
        :type config: List[KeyValue]
        """

        self._config = config

    @property
    def secrets(self):
        """Gets the secrets of this Rig.


        :return: The secrets of this Rig.
        :rtype: List[KeyValue]
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets):
        """Sets the secrets of this Rig.


        :param secrets: The secrets of this Rig.
        :type secrets: List[KeyValue]
        """

        self._secrets = secrets

    @property
    def racks(self):
        """Gets the racks of this Rig.


        :return: The racks of this Rig.
        :rtype: List[Rack]
        """
        return self._racks

    @racks.setter
    def racks(self, racks):
        """Sets the racks of this Rig.


        :param racks: The racks of this Rig.
        :type racks: List[Rack]
        """

        self._racks = racks
