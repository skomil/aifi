# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from aifi.api.models.base_model_ import Model
from aifi.api.models.connection import Connection
from aifi.api.models.device import Device
from aifi.api import util

from aifi.api.models.connection import Connection  # noqa: E501
from aifi.api.models.device import Device  # noqa: E501

class Rack(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, label=None, description=None, hidden_components=None, devices=None, output=None):  # noqa: E501
        """Rack - a model defined in OpenAPI

        :param id: The id of this Rack.  # noqa: E501
        :type id: str
        :param label: The label of this Rack.  # noqa: E501
        :type label: str
        :param description: The description of this Rack.  # noqa: E501
        :type description: str
        :param hidden_components: The hidden_components of this Rack.  # noqa: E501
        :type hidden_components: List[str]
        :param devices: The devices of this Rack.  # noqa: E501
        :type devices: List[Device]
        :param output: The output of this Rack.  # noqa: E501
        :type output: List[Connection]
        """
        self.openapi_types = {
            'id': str,
            'label': str,
            'description': str,
            'hidden_components': List[str],
            'devices': List[Device],
            'output': List[Connection]
        }

        self.attribute_map = {
            'id': 'id',
            'label': 'label',
            'description': 'description',
            'hidden_components': 'hiddenComponents',
            'devices': 'devices',
            'output': 'output'
        }

        self._id = id
        self._label = label
        self._description = description
        self._hidden_components = hidden_components
        self._devices = devices
        self._output = output

    @classmethod
    def from_dict(cls, dikt) -> 'Rack':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Rack of this Rack.  # noqa: E501
        :rtype: Rack
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Rack.


        :return: The id of this Rack.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Rack.


        :param id: The id of this Rack.
        :type id: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this Rack.


        :return: The label of this Rack.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Rack.


        :param label: The label of this Rack.
        :type label: str
        """

        self._label = label

    @property
    def description(self):
        """Gets the description of this Rack.


        :return: The description of this Rack.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Rack.


        :param description: The description of this Rack.
        :type description: str
        """

        self._description = description

    @property
    def hidden_components(self):
        """Gets the hidden_components of this Rack.


        :return: The hidden_components of this Rack.
        :rtype: List[str]
        """
        return self._hidden_components

    @hidden_components.setter
    def hidden_components(self, hidden_components):
        """Sets the hidden_components of this Rack.


        :param hidden_components: The hidden_components of this Rack.
        :type hidden_components: List[str]
        """

        self._hidden_components = hidden_components

    @property
    def devices(self):
        """Gets the devices of this Rack.


        :return: The devices of this Rack.
        :rtype: List[Device]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this Rack.


        :param devices: The devices of this Rack.
        :type devices: List[Device]
        """

        self._devices = devices

    @property
    def output(self):
        """Gets the output of this Rack.


        :return: The output of this Rack.
        :rtype: List[Connection]
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this Rack.


        :param output: The output of this Rack.
        :type output: List[Connection]
        """

        self._output = output
