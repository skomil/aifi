# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.component import Component
from openapi_server.models.connection import Connection
from openapi_server import util

from openapi_server.models.component import Component  # noqa: E501
from openapi_server.models.connection import Connection  # noqa: E501

class Rack(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, hidden_components=None, components=None, rack_as_component=None, output=None):  # noqa: E501
        """Rack - a model defined in OpenAPI

        :param id: The id of this Rack.  # noqa: E501
        :type id: str
        :param hidden_components: The hidden_components of this Rack.  # noqa: E501
        :type hidden_components: List[str]
        :param components: The components of this Rack.  # noqa: E501
        :type components: List[Component]
        :param rack_as_component: The rack_as_component of this Rack.  # noqa: E501
        :type rack_as_component: Component
        :param output: The output of this Rack.  # noqa: E501
        :type output: List[Connection]
        """
        self.openapi_types = {
            'id': str,
            'hidden_components': List[str],
            'components': List[Component],
            'rack_as_component': Component,
            'output': List[Connection]
        }

        self.attribute_map = {
            'id': 'id',
            'hidden_components': 'hiddenComponents',
            'components': 'components',
            'rack_as_component': 'rackAsComponent',
            'output': 'output'
        }

        self._id = id
        self._hidden_components = hidden_components
        self._components = components
        self._rack_as_component = rack_as_component
        self._output = output

    @classmethod
    def from_dict(cls, dikt) -> 'Rack':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Rack of this Rack.  # noqa: E501
        :rtype: Rack
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Rack.


        :return: The id of this Rack.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Rack.


        :param id: The id of this Rack.
        :type id: str
        """

        self._id = id

    @property
    def hidden_components(self):
        """Gets the hidden_components of this Rack.


        :return: The hidden_components of this Rack.
        :rtype: List[str]
        """
        return self._hidden_components

    @hidden_components.setter
    def hidden_components(self, hidden_components):
        """Sets the hidden_components of this Rack.


        :param hidden_components: The hidden_components of this Rack.
        :type hidden_components: List[str]
        """
        if hidden_components is not None and len(hidden_components) < 0:
            raise ValueError("Invalid value for `hidden_components`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._hidden_components = hidden_components

    @property
    def components(self):
        """Gets the components of this Rack.


        :return: The components of this Rack.
        :rtype: List[Component]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this Rack.


        :param components: The components of this Rack.
        :type components: List[Component]
        """
        if components is not None and len(components) < 0:
            raise ValueError("Invalid value for `components`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._components = components

    @property
    def rack_as_component(self):
        """Gets the rack_as_component of this Rack.


        :return: The rack_as_component of this Rack.
        :rtype: Component
        """
        return self._rack_as_component

    @rack_as_component.setter
    def rack_as_component(self, rack_as_component):
        """Sets the rack_as_component of this Rack.


        :param rack_as_component: The rack_as_component of this Rack.
        :type rack_as_component: Component
        """

        self._rack_as_component = rack_as_component

    @property
    def output(self):
        """Gets the output of this Rack.


        :return: The output of this Rack.
        :rtype: List[Connection]
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this Rack.


        :param output: The output of this Rack.
        :type output: List[Connection]
        """
        if output is not None and len(output) < 0:
            raise ValueError("Invalid value for `output`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._output = output
