# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from aifi.api.models.base_model_ import Model
from aifi.api.models.device_factory import DeviceFactory
from aifi.api.models.ui_setting import UiSetting
from aifi.api import util

from aifi.api.models.device_factory import DeviceFactory  # noqa: E501
from aifi.api.models.ui_setting import UiSetting  # noqa: E501

class Device(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, label=None, definition=None, ui_setting_overrides=None):  # noqa: E501
        """Device - a model defined in OpenAPI

        :param id: The id of this Device.  # noqa: E501
        :type id: str
        :param label: The label of this Device.  # noqa: E501
        :type label: str
        :param definition: The definition of this Device.  # noqa: E501
        :type definition: DeviceFactory
        :param ui_setting_overrides: The ui_setting_overrides of this Device.  # noqa: E501
        :type ui_setting_overrides: List[UiSetting]
        """
        self.openapi_types = {
            'id': str,
            'label': str,
            'definition': DeviceFactory,
            'ui_setting_overrides': List[UiSetting]
        }

        self.attribute_map = {
            'id': 'id',
            'label': 'label',
            'definition': 'definition',
            'ui_setting_overrides': 'uiSettingOverrides'
        }

        self._id = id
        self._label = label
        self._definition = definition
        self._ui_setting_overrides = ui_setting_overrides

    @classmethod
    def from_dict(cls, dikt) -> 'Device':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Device of this Device.  # noqa: E501
        :rtype: Device
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Device.


        :return: The id of this Device.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Device.


        :param id: The id of this Device.
        :type id: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this Device.


        :return: The label of this Device.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Device.


        :param label: The label of this Device.
        :type label: str
        """

        self._label = label

    @property
    def definition(self):
        """Gets the definition of this Device.


        :return: The definition of this Device.
        :rtype: DeviceFactory
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this Device.


        :param definition: The definition of this Device.
        :type definition: DeviceFactory
        """

        self._definition = definition

    @property
    def ui_setting_overrides(self):
        """Gets the ui_setting_overrides of this Device.


        :return: The ui_setting_overrides of this Device.
        :rtype: List[UiSetting]
        """
        return self._ui_setting_overrides

    @ui_setting_overrides.setter
    def ui_setting_overrides(self, ui_setting_overrides):
        """Sets the ui_setting_overrides of this Device.


        :param ui_setting_overrides: The ui_setting_overrides of this Device.
        :type ui_setting_overrides: List[UiSetting]
        """

        self._ui_setting_overrides = ui_setting_overrides
