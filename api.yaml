openapi: 3.0.3
info:
  title: aifi - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    ```mermaid
    classDiagram
    class Component {
        string id
    }
    class ComponentTemplate {
        string id
        string label
    }
    class Rack {
        string id
        string label
        string description
        %% the below property is an array with cardinality [0..*]
        string hiddenComponents
    }
    class UiSetting {
        string id
        string label
        boolean hidden
        string dataType
        string uiType
        object defaultValue
        object initialValue
    }
    class ComponentDefinition {
        string id
        string label
        object apiConfiguration
        string version
    }

    class Asset {
        string id
        string type
        string label
        string description
        string storageLocation
        %% the below property is an array with cardinality [0..*]
        string previewLocations
    }
    
    class Rig { 
    }
    class Connection {
        string id
        string label
        string description
        string type
        boolean required
        boolean allowMultiple
    }
    class KeyValue {
        string key
        string value
    }
    class Error {
        string message
        integer code
    }

    Rack "1" --> "0..*" Component : components
    Rig "1" --> "0..*" ComponentDefinition : componentDefinitions
    Rig  "1" --> "0..*" KeyValue : config
    Rig  "1" --> "0..*" KeyValue : secrets
    Rack "1" --> "0..1"  Component: rackAsComponent
    Rack "1" --> "0..*"  Connection: output
    Rig "1" --> "0..*" Rack : racks
    ComponentDefinition "1" --> "1..*" ComponentTemplate : componentTemplates
    ComponentDefinition "1" --> "0..*" Asset : assets
    Component "1" --> "0..1"  ComponentDefinition: componentDefinition
    Component "1" --> "0..*"  UiSetting: uiSettings
    Component "1" --> "0..*"  Connection: input
    Component "1" --> "0..*"  Connection: output
    ComponentTemplate "1" --> "0..*"  UiSetting: uiSettings
    ComponentTemplate "1" --> "0..*"  Connection: input
    ComponentTemplate "1" --> "0..*"  Connection: output
    ```
  version: 1.0.0
paths:
  /racks:
    get:
      summary: Retrieve a list of racks
      operationId: getRacks
      responses:
        '200':
          description: A list of racks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rack'
    post:
      summary: Create a new rack
      operationId: createRack
      requestBody:
        description: The rack to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rack'
      responses:
        '201':
          description: Rack created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rack'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /racks/{rackId}:
    get:
      summary: Retrieve a specific rack
      operationId: getRackById
      parameters:
        - name: rackId
          in: path
          description: The ID of the rack to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single rack
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rack'
        '404':
          description: Rack not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a specific rack
      operationId: updateRackById
      parameters:
        - name: rackId
          in: path
          description: The ID of the rack to update
          required: true
          schema:
            type: string
      requestBody:
        description: The updated rack data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rack'
      responses:
        '200':
          description: Rack updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rack'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Rack not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a specific rack
      operationId: deleteRackById
      parameters:
        - name: rackId
          in: path
          description: The ID of the rack to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Rack deleted successfully
        '404':
          description: Rack not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /rig:
    get:
      summary: Retrieve the rig
      operationId: getRig
      responses:
        '200':
          description: The rig object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rig'

components:
  schemas:
    Asset:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        label:
          type: string
        description:
          type: string
        storageLocation:
          type: string
        previewLocations:
          type: array
          items:
            type: string

    Component:
      type: object
      properties:
        id:
          type: string
        uiSettings:
          type: array
          items:
            $ref: '#/components/schemas/UiSetting'
        input:
          type: array
          items:
            $ref: '#/components/schemas/Connection'
        output:
          type: array
          items:
            $ref: '#/components/schemas/Connection'
        componentDefinition:
          $ref: '#/components/schemas/ComponentDefinition'

    ComponentDefinition:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        apiConfiguration:
          type: object
        version:
          type: string
        componentTemplates:
          type: array
          items:
            $ref: '#/components/schemas/ComponentTemplate'
        assets:
          type: array
          items:
            $ref: '#/components/schemas/Asset'

    ComponentTemplate:
      type: object
      properties:
          id:
              type: string
              description: The unique identifier for the component template.
          label:
              type: string
              description: The label for the component template.
          uiSettings:
              type: array
              items:
                  $ref: '#/components/schemas/UiSetting'
              description: The user interface settings for the component.
          input:
              type: array
              items:
                  $ref: '#/components/schemas/Connection'
              description: The input connections for the component.
          output:
              type: array
              items:
                  $ref: '#/components/schemas/Connection'
              description: The output connections for the component.
      required:
          - id
          - label

    Connection:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        description:
          type: string
        type:
          type: string
        required:
          type: boolean
        allowMultiple:
          type: boolean

    KeyValue:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    Rack:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        description:
          type: string
        components:
          type: array
          items:
            $ref: '#/components/schemas/Component'
        rackAsComponent:
          $ref: '#/components/schemas/Component'
        output:
          type: array
          items:
            $ref: '#/components/schemas/Connection'
        hiddenComponents:
          type: array
          items:
            type: string

    Rig:
      type: object
      properties:
        config:
          type: array
          items:
            $ref: '#/components/schemas/KeyValue'
        secrets:
          type: array
          items:
            $ref: '#/components/schemas/KeyValue'
        componentDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/ComponentDefinition'
        racks:
          type: array
          items:
            $ref: '#/components/schemas/Rack'

    UiSetting:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        hidden:
          type: boolean
        dataType:
          type: string
        uiType:
          type: string
        defaultValue:
          type: object
        initialValue:
          type: object

    Error:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer


