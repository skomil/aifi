/* tslint:disable */
/* eslint-disable */
/**
 * aifi - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about ```mermaid classDiagram class Component {     string id } class ComponentTemplate {     string id     string label } class Rack {     string id     %% the below property is an array with cardinality [0..*]     string hiddenComponents } class UiSetting {     string id     string label     boolean hidden     string dataType     string uiType     object defaultValue     object initialValue } class ComponentDefinition {     string id     string label     object apiConfiguration     string version }  class Asset {     string id     string type     string label     string description     string storageLocation     %% the below property is an array with cardinality [0..*]     string previewLocations }  class Rig {  } class Connection {     string id     string label     string description     string type     boolean required     boolean allowMultiple } class KeyValue {     string key     string value } class Error {     string message     integer code }  Rack \"1\" --> \"0..*\" Component : components Rig \"1\" --> \"0..*\" ComponentDefinition : componentDefinitions Rig  \"1\" --> \"0..*\" KeyValue : config Rig  \"1\" --> \"0..*\" KeyValue : secrets Rack \"1\" --> \"0..1\"  Component: rackAsComponent Rack \"1\" --> \"0..*\"  Connection: output Rig \"1\" --> \"0..*\" Rack : racks ComponentDefinition \"1\" --> \"1..*\" ComponentTemplate : componentTemplates ComponentDefinition \"1\" --> \"0..*\" Asset : assets ComponentTemplate \"1\" --> \"1\" Component: component Component \"1\" --> \"0..1\"  ComponentDefinition: componentDefinition Component \"1\" --> \"0..*\"  UiSetting: uiSettings Component \"1\" --> \"0..*\"  Connection: input Component \"1\" --> \"0..*\"  Connection: output ```
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Asset
 */
export interface Asset {
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'label'?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'storageLocation'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Asset
     */
    'previewLocations'?: Array<string>;
}
/**
 * 
 * @export
 * @interface Component
 */
export interface Component {
    /**
     * 
     * @type {string}
     * @memberof Component
     */
    'id'?: string;
    /**
     * 
     * @type {ComponentDefinition}
     * @memberof Component
     */
    'componentDefinition'?: ComponentDefinition;
    /**
     * 
     * @type {Array<UiSetting>}
     * @memberof Component
     */
    'uiSettings'?: Array<UiSetting>;
    /**
     * 
     * @type {Array<Connection>}
     * @memberof Component
     */
    'input'?: Array<Connection>;
    /**
     * 
     * @type {Array<Connection>}
     * @memberof Component
     */
    'output'?: Array<Connection>;
}
/**
 * 
 * @export
 * @interface ComponentDefinition
 */
export interface ComponentDefinition {
    /**
     * 
     * @type {string}
     * @memberof ComponentDefinition
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ComponentDefinition
     */
    'label'?: string;
    /**
     * 
     * @type {object}
     * @memberof ComponentDefinition
     */
    'apiConfiguration'?: object;
    /**
     * 
     * @type {string}
     * @memberof ComponentDefinition
     */
    'version'?: string;
    /**
     * 
     * @type {Array<ComponentTemplate>}
     * @memberof ComponentDefinition
     */
    'componentTemplates'?: Array<ComponentTemplate>;
    /**
     * 
     * @type {Array<Asset>}
     * @memberof ComponentDefinition
     */
    'assets'?: Array<Asset>;
}
/**
 * 
 * @export
 * @interface ComponentTemplate
 */
export interface ComponentTemplate {
    /**
     * 
     * @type {string}
     * @memberof ComponentTemplate
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ComponentTemplate
     */
    'label'?: string;
    /**
     * 
     * @type {Component}
     * @memberof ComponentTemplate
     */
    'component'?: Component;
}
/**
 * 
 * @export
 * @interface Connection
 */
export interface Connection {
    /**
     * 
     * @type {string}
     * @memberof Connection
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Connection
     */
    'label'?: string;
    /**
     * 
     * @type {string}
     * @memberof Connection
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Connection
     */
    'type'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Connection
     */
    'required'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Connection
     */
    'allowMultiple'?: boolean;
}
/**
 * 
 * @export
 * @interface KeyValue
 */
export interface KeyValue {
    /**
     * 
     * @type {string}
     * @memberof KeyValue
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof KeyValue
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    'code'?: number;
}
/**
 * 
 * @export
 * @interface Rack
 */
export interface Rack {
    /**
     * 
     * @type {string}
     * @memberof Rack
     */
    'id'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Rack
     */
    'hiddenComponents'?: Array<string>;
    /**
     * 
     * @type {Array<Component>}
     * @memberof Rack
     */
    'components'?: Array<Component>;
    /**
     * 
     * @type {Component}
     * @memberof Rack
     */
    'rackAsComponent'?: Component;
    /**
     * 
     * @type {Array<Connection>}
     * @memberof Rack
     */
    'output'?: Array<Connection>;
}
/**
 * 
 * @export
 * @interface Rig
 */
export interface Rig {
    /**
     * 
     * @type {Array<ComponentDefinition>}
     * @memberof Rig
     */
    'componentDefinitions'?: Array<ComponentDefinition>;
    /**
     * 
     * @type {Array<KeyValue>}
     * @memberof Rig
     */
    'config'?: Array<KeyValue>;
    /**
     * 
     * @type {Array<KeyValue>}
     * @memberof Rig
     */
    'secrets'?: Array<KeyValue>;
    /**
     * 
     * @type {Array<Rack>}
     * @memberof Rig
     */
    'racks'?: Array<Rack>;
}
/**
 * 
 * @export
 * @interface UiSetting
 */
export interface UiSetting {
    /**
     * 
     * @type {string}
     * @memberof UiSetting
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UiSetting
     */
    'label'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UiSetting
     */
    'hidden'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UiSetting
     */
    'dataType'?: string;
    /**
     * 
     * @type {string}
     * @memberof UiSetting
     */
    'uiType'?: string;
    /**
     * 
     * @type {object}
     * @memberof UiSetting
     */
    'defaultValue'?: object;
    /**
     * 
     * @type {object}
     * @memberof UiSetting
     */
    'initialValue'?: object;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new rack
         * @param {Rack} rack The rack to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRack: async (rack: Rack, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rack' is not null or undefined
            assertParamExists('createRack', 'rack', rack)
            const localVarPath = `/racks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rack, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a specific rack
         * @param {string} rackId The ID of the rack to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRackById: async (rackId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rackId' is not null or undefined
            assertParamExists('deleteRackById', 'rackId', rackId)
            const localVarPath = `/racks/{rackId}`
                .replace(`{${"rackId"}}`, encodeURIComponent(String(rackId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a specific rack
         * @param {string} rackId The ID of the rack to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRackById: async (rackId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rackId' is not null or undefined
            assertParamExists('getRackById', 'rackId', rackId)
            const localVarPath = `/racks/{rackId}`
                .replace(`{${"rackId"}}`, encodeURIComponent(String(rackId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a list of racks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRacks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/racks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the rig
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRig: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rig`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a specific rack
         * @param {string} rackId The ID of the rack to update
         * @param {Rack} rack The updated rack data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRackById: async (rackId: string, rack: Rack, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rackId' is not null or undefined
            assertParamExists('updateRackById', 'rackId', rackId)
            // verify required parameter 'rack' is not null or undefined
            assertParamExists('updateRackById', 'rack', rack)
            const localVarPath = `/racks/{rackId}`
                .replace(`{${"rackId"}}`, encodeURIComponent(String(rackId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rack, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new rack
         * @param {Rack} rack The rack to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRack(rack: Rack, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rack>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRack(rack, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a specific rack
         * @param {string} rackId The ID of the rack to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRackById(rackId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRackById(rackId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve a specific rack
         * @param {string} rackId The ID of the rack to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRackById(rackId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rack>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRackById(rackId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve a list of racks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRacks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Rack>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRacks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve the rig
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRig(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rig>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRig(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a specific rack
         * @param {string} rackId The ID of the rack to update
         * @param {Rack} rack The updated rack data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRackById(rackId: string, rack: Rack, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rack>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRackById(rackId, rack, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new rack
         * @param {Rack} rack The rack to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRack(rack: Rack, options?: any): AxiosPromise<Rack> {
            return localVarFp.createRack(rack, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a specific rack
         * @param {string} rackId The ID of the rack to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRackById(rackId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRackById(rackId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a specific rack
         * @param {string} rackId The ID of the rack to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRackById(rackId: string, options?: any): AxiosPromise<Rack> {
            return localVarFp.getRackById(rackId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a list of racks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRacks(options?: any): AxiosPromise<Array<Rack>> {
            return localVarFp.getRacks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the rig
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRig(options?: any): AxiosPromise<Rig> {
            return localVarFp.getRig(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a specific rack
         * @param {string} rackId The ID of the rack to update
         * @param {Rack} rack The updated rack data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRackById(rackId: string, rack: Rack, options?: any): AxiosPromise<Rack> {
            return localVarFp.updateRackById(rackId, rack, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Create a new rack
     * @param {Rack} rack The rack to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createRack(rack: Rack, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createRack(rack, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a specific rack
     * @param {string} rackId The ID of the rack to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteRackById(rackId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteRackById(rackId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a specific rack
     * @param {string} rackId The ID of the rack to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRackById(rackId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRackById(rackId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a list of racks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRacks(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRacks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the rig
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRig(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRig(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a specific rack
     * @param {string} rackId The ID of the rack to update
     * @param {Rack} rack The updated rack data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateRackById(rackId: string, rack: Rack, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateRackById(rackId, rack, options).then((request) => request(this.axios, this.basePath));
    }
}


