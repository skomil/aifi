# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gen_api.models.base_model_ import Model
from gen_api.models.component import Component
from gen_api import util

from gen_api.models.component import Component  # noqa: E501

class Rack(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, components=None, config=None):  # noqa: E501
        """Rack - a model defined in OpenAPI

        :param id: The id of this Rack.  # noqa: E501
        :type id: str
        :param components: The components of this Rack.  # noqa: E501
        :type components: List[Component]
        :param config: The config of this Rack.  # noqa: E501
        :type config: object
        """
        self.openapi_types = {
            'id': str,
            'components': List[Component],
            'config': object
        }

        self.attribute_map = {
            'id': 'id',
            'components': 'components',
            'config': 'config'
        }

        self._id = id
        self._components = components
        self._config = config

    @classmethod
    def from_dict(cls, dikt) -> 'Rack':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Rack of this Rack.  # noqa: E501
        :rtype: Rack
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Rack.


        :return: The id of this Rack.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Rack.


        :param id: The id of this Rack.
        :type id: str
        """

        self._id = id

    @property
    def components(self):
        """Gets the components of this Rack.


        :return: The components of this Rack.
        :rtype: List[Component]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this Rack.


        :param components: The components of this Rack.
        :type components: List[Component]
        """

        self._components = components

    @property
    def config(self):
        """Gets the config of this Rack.


        :return: The config of this Rack.
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Rack.


        :param config: The config of this Rack.
        :type config: object
        """

        self._config = config
